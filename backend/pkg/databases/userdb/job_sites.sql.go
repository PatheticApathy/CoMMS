// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: job_sites.sql

package userdb

import (
	"context"
	"database/sql"
)

const addJobSite = `-- name: AddJobSite :one
INSERT INTO JobSites(name, addr, location_lat, location_lng, company_id) VALUES (?,?,?,?,?) RETURNING id, name, addr, location_lat, location_lng, company_id
`

type AddJobSiteParams struct {
	Name        string          `json:"name"`
	Addr        sql.NullString  `json:"addr"`
	LocationLat sql.NullFloat64 `json:"location_lat"`
	LocationLng sql.NullFloat64 `json:"location_lng"`
	CompanyID   sql.NullInt64   `json:"company_id"`
}

func (q *Queries) AddJobSite(ctx context.Context, arg AddJobSiteParams) (JobSite, error) {
	row := q.db.QueryRowContext(ctx, addJobSite,
		arg.Name,
		arg.Addr,
		arg.LocationLat,
		arg.LocationLng,
		arg.CompanyID,
	)
	var i JobSite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Addr,
		&i.LocationLat,
		&i.LocationLng,
		&i.CompanyID,
	)
	return i, err
}

const getAllJobSites = `-- name: GetAllJobSites :many
SELECT id, name, addr, location_lat, location_lng FROM JobSites
`

type GetAllJobSitesRow struct {
	ID          int64           `json:"id"`
	Name        string          `json:"name"`
	Addr        sql.NullString  `json:"addr"`
	LocationLat sql.NullFloat64 `json:"location_lat"`
	LocationLng sql.NullFloat64 `json:"location_lng"`
}

func (q *Queries) GetAllJobSites(ctx context.Context) ([]GetAllJobSitesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllJobSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllJobSitesRow
	for rows.Next() {
		var i GetAllJobSitesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Addr,
			&i.LocationLat,
			&i.LocationLng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobSite = `-- name: GetJobSite :one
SELECT id, name, addr, location_lat, location_lng FROM JobSites WHERE id=?
`

type GetJobSiteRow struct {
	ID          int64           `json:"id"`
	Name        string          `json:"name"`
	Addr        sql.NullString  `json:"addr"`
	LocationLat sql.NullFloat64 `json:"location_lat"`
	LocationLng sql.NullFloat64 `json:"location_lng"`
}

func (q *Queries) GetJobSite(ctx context.Context, id int64) (GetJobSiteRow, error) {
	row := q.db.QueryRowContext(ctx, getJobSite, id)
	var i GetJobSiteRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Addr,
		&i.LocationLat,
		&i.LocationLng,
	)
	return i, err
}
