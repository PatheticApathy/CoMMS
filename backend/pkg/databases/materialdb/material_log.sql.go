// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: material_log.sql

package materialdb

import (
	"context"
	"database/sql"
)

const addMaterialLog = `-- name: AddMaterialLog :one
INSERT 
INTO MaterialLogs(material_id, note, status, quantity_change,timestamp)
VALUES (?,?,?,?,date()) 
RETURNING id, material_id, note, status, quantity_change, timestamp
`

type AddMaterialLogParams struct {
	MaterialID     int64          `json:"material_id"`
	Note           sql.NullString `json:"note"`
	Status         string         `json:"status"`
	QuantityChange int64          `json:"quantity_change"`
}

func (q *Queries) AddMaterialLog(ctx context.Context, arg AddMaterialLogParams) (MaterialLog, error) {
	row := q.db.QueryRowContext(ctx, addMaterialLog,
		arg.MaterialID,
		arg.Note,
		arg.Status,
		arg.QuantityChange,
	)
	var i MaterialLog
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.Note,
		&i.Status,
		&i.QuantityChange,
		&i.Timestamp,
	)
	return i, err
}

const changeMaterialNote = `-- name: ChangeMaterialNote :one
UPDATE MaterialLogs 
  SET note = ?
  WHERE id = ? 
RETURNING id, material_id, note, status, quantity_change, timestamp
`

type ChangeMaterialNoteParams struct {
	Note sql.NullString `json:"note"`
	ID   int64          `json:"id"`
}

func (q *Queries) ChangeMaterialNote(ctx context.Context, arg ChangeMaterialNoteParams) (MaterialLog, error) {
	row := q.db.QueryRowContext(ctx, changeMaterialNote, arg.Note, arg.ID)
	var i MaterialLog
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.Note,
		&i.Status,
		&i.QuantityChange,
		&i.Timestamp,
	)
	return i, err
}

const getAllMaterialLogs = `-- name: GetAllMaterialLogs :many
SELECT id, material_id, note, status, quantity_change, timestamp FROM MaterialLogs
`

func (q *Queries) GetAllMaterialLogs(ctx context.Context) ([]MaterialLog, error) {
	rows, err := q.db.QueryContext(ctx, getAllMaterialLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaterialLog
	for rows.Next() {
		var i MaterialLog
		if err := rows.Scan(
			&i.ID,
			&i.MaterialID,
			&i.Note,
			&i.Status,
			&i.QuantityChange,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaterialLogsByID = `-- name: GetMaterialLogsByID :one
SELECT id, material_id, note, status, quantity_change, timestamp
FROM MaterialLogs
WHERE id = ?
`

func (q *Queries) GetMaterialLogsByID(ctx context.Context, id int64) (MaterialLog, error) {
	row := q.db.QueryRowContext(ctx, getMaterialLogsByID, id)
	var i MaterialLog
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.Note,
		&i.Status,
		&i.QuantityChange,
		&i.Timestamp,
	)
	return i, err
}

const getMaterialLogsByMaterial = `-- name: GetMaterialLogsByMaterial :many
SELECT id, material_id, note, status, quantity_change, timestamp
FROM MaterialLogs
WHERE material_id = ?
`

func (q *Queries) GetMaterialLogsByMaterial(ctx context.Context, materialID int64) ([]MaterialLog, error) {
	rows, err := q.db.QueryContext(ctx, getMaterialLogsByMaterial, materialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaterialLog
	for rows.Next() {
		var i MaterialLog
		if err := rows.Scan(
			&i.ID,
			&i.MaterialID,
			&i.Note,
			&i.Status,
			&i.QuantityChange,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
