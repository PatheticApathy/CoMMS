basePath: /
definitions:
  auth.Identity:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  auth.Token:
    properties:
      token:
        type: string
    type: object
  auth.UnEncrypted:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  sql.NullFloat64:
    properties:
      float64:
        type: number
      valid:
        description: Valid is true if Float64 is not NULL
        type: boolean
    type: object
  sql.NullInt64:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  userdb.AddCompanyParams:
    properties:
      addr:
        $ref: '#/definitions/sql.NullString'
      location_lat:
        $ref: '#/definitions/sql.NullFloat64'
      location_lng:
        $ref: '#/definitions/sql.NullFloat64'
      name:
        type: string
    type: object
  userdb.AddJobSiteParams:
    properties:
      addr:
        $ref: '#/definitions/sql.NullString'
      company_id:
        type: integer
      location_lat:
        $ref: '#/definitions/sql.NullFloat64'
      location_lng:
        $ref: '#/definitions/sql.NullFloat64'
      name:
        type: string
    type: object
  userdb.AddUserParams:
    properties:
      company_id:
        $ref: '#/definitions/sql.NullInt64'
      email:
        type: string
      firstname:
        $ref: '#/definitions/sql.NullString'
      jobsite_id:
        $ref: '#/definitions/sql.NullInt64'
      lastname:
        $ref: '#/definitions/sql.NullString'
      password:
        type: string
      phone:
        type: string
      profilepicture:
        $ref: '#/definitions/sql.NullString'
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  userdb.Company:
    properties:
      addr:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      location_lat:
        $ref: '#/definitions/sql.NullFloat64'
      location_lng:
        $ref: '#/definitions/sql.NullFloat64'
      name:
        type: string
    type: object
  userdb.GetUsersByJobsiteAndCompanyRow:
    properties:
      company_id:
        $ref: '#/definitions/sql.NullInt64'
      company_name:
        type: string
      email:
        type: string
      firstname:
        $ref: '#/definitions/sql.NullString'
      jobsite_id:
        $ref: '#/definitions/sql.NullInt64'
      jobsite_name:
        type: string
      lastname:
        $ref: '#/definitions/sql.NullString'
      phone:
        type: string
      profilepicture:
        $ref: '#/definitions/sql.NullString'
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  userdb.GetUsersWithCompanyAndJobsiteRow:
    properties:
      company_id:
        $ref: '#/definitions/sql.NullInt64'
      company_name:
        type: string
      email:
        type: string
      firstname:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      jobsite_id:
        $ref: '#/definitions/sql.NullInt64'
      jobsite_name:
        type: string
      lastname:
        $ref: '#/definitions/sql.NullString'
      phone:
        type: string
      profilepicture:
        $ref: '#/definitions/sql.NullString'
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  userdb.JobSite:
    properties:
      addr:
        $ref: '#/definitions/sql.NullString'
      company_id:
        type: integer
      id:
        type: integer
      location_lat:
        $ref: '#/definitions/sql.NullFloat64'
      location_lng:
        $ref: '#/definitions/sql.NullFloat64'
      name:
        type: string
    type: object
  userdb.SignUpParams:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  userdb.UpdateUserParams:
    properties:
      company_id:
        $ref: '#/definitions/sql.NullInt64'
      email:
        $ref: '#/definitions/sql.NullString'
      firstname:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      jobsite_id:
        $ref: '#/definitions/sql.NullInt64'
      lastname:
        $ref: '#/definitions/sql.NullString'
      password:
        $ref: '#/definitions/sql.NullString'
      phone:
        $ref: '#/definitions/sql.NullString'
      profilepicture:
        $ref: '#/definitions/sql.NullString'
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        $ref: '#/definitions/sql.NullString'
    type: object
  userdb.User:
    properties:
      company_id:
        $ref: '#/definitions/sql.NullInt64'
      email:
        type: string
      firstname:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      jobsite_id:
        $ref: '#/definitions/sql.NullInt64'
      lastname:
        $ref: '#/definitions/sql.NullString'
      password:
        type: string
      phone:
        type: string
      profilepicture:
        $ref: '#/definitions/sql.NullString'
      role:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
host: localhost:8082
info:
  contact:
    name: Comms group
    url: http://github.com/PatheticApathy/CoMMS
  description: This is the api for dealing with users
  termsOfService: http://swagger.io/terms/
  title: User API
  version: "1.0"
paths:
  /company/all:
    get:
      description: Gets companies
      produces:
      - application/json
      responses:
        "200":
          description: company
          schema:
            $ref: '#/definitions/userdb.Company'
        "500":
          description: Faliled to get companies
          schema:
            type: string
      summary: fetches all companies
      tags:
      - companies
  /company/create:
    post:
      consumes:
      - application/json
      description: Adds company to the database and assigns the user as a company
        admin
      parameters:
      - description: Format of add company request
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/userdb.AddCompanyParams'
      produces:
      - application/json
      responses:
        "200":
          description: company
          schema:
            $ref: '#/definitions/userdb.Company'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create company
          schema:
            type: string
      summary: post company to database
      tags:
      - companies
  /company/search:
    get:
      description: Gets company using id
      parameters:
      - description: company's identification number
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: company
          schema:
            $ref: '#/definitions/userdb.Company'
        "400":
          description: Invalid id
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: fetches company based on given paremeters
      tags:
      - companies
  /sites/add:
    post:
      consumes:
      - application/json
      description: Adds job_site to the database using valid json structure
      parameters:
      - description: Format of add jobsite request
        in: body
        name: jobsite
        required: true
        schema:
          $ref: '#/definitions/userdb.AddJobSiteParams'
      produces:
      - application/json
      responses:
        "200":
          description: jobsite
          schema:
            $ref: '#/definitions/userdb.JobSite'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: post job_site to database
      tags:
      - sites
  /sites/all:
    get:
      description: Get all jobsites
      produces:
      - application/json
      responses:
        "200":
          description: job site
          schema:
            items:
              $ref: '#/definitions/userdb.JobSite'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: fetches all job_sites
      tags:
      - sites
  /sites/company:
    get:
      description: Get all jobsites for a specific company
      produces:
      - application/json
      responses:
        "200":
          description: job site
          schema:
            items:
              $ref: '#/definitions/userdb.JobSite'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: fetches job_sites for a specific company
      tags:
      - sites
  /sites/search:
    get:
      description: Gets jobsites using id(may add more parameters later)
      parameters:
      - description: jobsite's identification number
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: job site
          schema:
            $ref: '#/definitions/userdb.JobSite'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: fetches job_site based on given paremeters
      tags:
      - sites
  /user/all:
    get:
      description: Gets users
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/userdb.User'
        "500":
          description: Faliled to get users
          schema:
            type: string
      summary: fetches all users
      tags:
      - users
  /user/coworkers:
    get:
      description: Adds user to the database using valid json structure
      parameters:
      - description: user id
        in: query
        name: user
        required: true
        type: integer
      - description: company id
        in: query
        name: company
        required: true
        type: integer
      - description: jobsite id
        in: query
        name: site
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User login token
          schema:
            items:
              $ref: '#/definitions/userdb.GetUsersByJobsiteAndCompanyRow'
            type: array
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: post user to database
      tags:
      - users
  /user/create:
    post:
      consumes:
      - application/json
      description: Adds user to the database using valid json structure
      parameters:
      - description: Format of add user request
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/userdb.AddUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/userdb.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create user
          schema:
            type: string
      security:
      - identity: []
      summary: post user to database
      tags:
      - users
  /user/decrypt:
    post:
      consumes:
      - application/json
      description: Decrypt user login token
      parameters:
      - description: Format of login user request
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/auth.Token'
      responses:
        "200":
          description: User login data token
          schema:
            $ref: '#/definitions/auth.Identity'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      summary: Decrypts token
      tags:
      - users
  /user/delete:
    delete:
      description: Deletes user using id(may add more parameters later)
      parameters:
      - description: user's identification number
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/userdb.User'
        "400":
          description: Invalid user ID
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            type: string
      summary: removes user based on given paremeters
      tags:
      - users
  /user/join:
    get:
      description: Gets users with company and jobsite names
      produces:
      - application/json
      responses:
        "200":
          description: users with company and jobsite names
          schema:
            items:
              $ref: '#/definitions/userdb.GetUsersWithCompanyAndJobsiteRow'
            type: array
        "500":
          description: Failed to get users
          schema:
            type: string
      summary: fetches all users with their associated company and jobsite names
      tags:
      - users
  /user/loggout:
    post:
      description: Replaces login cookie with an empty one that deletes itself instantly
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Removes authenticated user information
      tags:
      - users
  /user/login:
    post:
      consumes:
      - application/json
      description: |-
        Pulls user login information and authenticates the user
        The id can be left blank
      parameters:
      - description: Format of login user request
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/auth.UnEncrypted'
      responses:
        "200":
          description: User login token
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Server Error
          schema:
            type: string
      summary: Authenticate user information
      tags:
      - users
  /user/search:
    get:
      description: Gets user using id(may add more parameters later)
      parameters:
      - description: user's identification number
        in: query
        name: id
        type: integer
      - description: user's username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/userdb.User'
        "400":
          description: Invalid id
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: fetches user based on given paremeters
      tags:
      - users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Adds user to the database using valid json structure
      parameters:
      - description: Format of signup user request
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/userdb.SignUpParams'
      produces:
      - application/json
      responses:
        "200":
          description: User login token
          schema:
            $ref: '#/definitions/auth.Token'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to signup user
          schema:
            type: string
      summary: post user to database
      tags:
      - users
  /user/update:
    put:
      description: Updates user using id(may add more parameters later)
      parameters:
      - description: Format of update user request
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/userdb.UpdateUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/userdb.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to update user
          schema:
            type: string
      summary: updates user based on given parameters
      tags:
      - users
securityDefinitions:
  identity:
    description: gives read and write access to api
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
