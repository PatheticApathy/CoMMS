// Package material Code generated by swaggo/swag. DO NOT EDIT
package material

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Comms group",
            "url": "http://github.com/PatheticApathy/CoMMS"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/checkout/all": {
            "get": {
                "description": "gets all checkout logs if they exist",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "checkout logs"
                ],
                "summary": "fetches all checkout logs",
                "responses": {
                    "200": {
                        "description": "checkout logs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.CheckoutLog"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checkout/in": {
            "put": {
                "description": "Adds checkin time to existing checkout log",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "checkout logs"
                ],
                "summary": "Adds checkin time to existing checkout log",
                "parameters": [
                    {
                        "description": "id of checkoutlog",
                        "name": "logid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "checkout log",
                        "schema": {
                            "$ref": "#/definitions/materialdb.CheckoutLog"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checkout/out": {
            "post": {
                "description": "Adds checkout log for a materials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "checkout logs"
                ],
                "summary": "post checkout of material",
                "parameters": [
                    {
                        "description": "Format of add ckeckout log",
                        "name": "checkoutlg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/materialdb.AddCheckoutLogParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "checkout log",
                        "schema": {
                            "$ref": "#/definitions/materialdb.CheckoutLog"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checkout/recent": {
            "get": {
                "description": "Safer and faster way to get newest checkout logs for given material",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "checkout logs"
                ],
                "summary": "fetches recent checkout logs for a given material id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of material",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "checkout logs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.CheckoutLog"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/company/all": {
            "get": {
                "description": "Gets companies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "fetches all companies",
                "responses": {
                    "200": {
                        "description": "company",
                        "schema": {
                            "$ref": "#/definitions/userdb.Company"
                        }
                    },
                    "500": {
                        "description": "Faliled to get companies",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/company/create": {
            "post": {
                "description": "Adds company to the database and assigns the user as a company admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "post company to database",
                "parameters": [
                    {
                        "description": "Format of add company request",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdb.AddCompanyParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "company",
                        "schema": {
                            "$ref": "#/definitions/userdb.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create company",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/company/search": {
            "get": {
                "description": "Gets company using id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "fetches company based on given paremeters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "company's identification number",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "company",
                        "schema": {
                            "$ref": "#/definitions/userdb.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/material/add": {
            "post": {
                "description": "Adds materials to the database using valid json structure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material"
                ],
                "summary": "post materials to database",
                "parameters": [
                    {
                        "description": "Format of add material request",
                        "name": "material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/materialdb.AddMaterialParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material",
                        "schema": {
                            "$ref": "#/definitions/materialdb.Material"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/material/all": {
            "get": {
                "description": "Gets all material form database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material"
                ],
                "summary": "gets all materials from database",
                "responses": {
                    "200": {
                        "description": "material",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.Material"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/material/change": {
            "put": {
                "description": "changes the quantity of the given material using it's id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material"
                ],
                "summary": "adjust quantity based on the requested amount",
                "parameters": [
                    {
                        "description": "Format of changing material quantity",
                        "name": "material",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/materialdb.ChangeQuantityParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material",
                        "schema": {
                            "$ref": "#/definitions/materialdb.Material"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/material/delete": {
            "delete": {
                "description": "deltes material from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material"
                ],
                "summary": "deletes material",
                "parameters": [
                    {
                        "description": "Id of material to delete",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "delted material",
                        "schema": {
                            "$ref": "#/definitions/materialdb.Material"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/material/search": {
            "get": {
                "description": "Can get material using its id, quantity and unit, type, or job site",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material"
                ],
                "summary": "fetches material based on given  query parameters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of material",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "quantity of material, must be combined with unit",
                        "name": "quantity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "unit of the quantity, must be combined with quantity",
                        "name": "unit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "type of material",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "site id of which material belongs to",
                        "name": "site",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.Material"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mlogs/add": {
            "post": {
                "description": "Adds material log  to the database using valid json structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material logs"
                ],
                "summary": "post material log to database",
                "parameters": [
                    {
                        "description": "Format of add material log request",
                        "name": "materiallog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/materialdb.AddMaterialLogParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material log",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.MaterialLog"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mlogs/all": {
            "get": {
                "description": "gets all material logs if they exist",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material logs"
                ],
                "summary": "fetches all material logs",
                "responses": {
                    "200": {
                        "description": "material logs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.MaterialLog"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mlogs/note": {
            "put": {
                "description": "changes the not field of a materiallog",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material logs"
                ],
                "summary": "post changes not on a existing material log",
                "parameters": [
                    {
                        "description": "Format of changing matterial note request",
                        "name": "note_and-id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/materialdb.ChangeMaterialNoteParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material log",
                        "schema": {
                            "$ref": "#/definitions/materialdb.MaterialLog"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mlogs/recent": {
            "get": {
                "description": "Safer and faster way to get newest material logs for given material",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material logs"
                ],
                "summary": "fetches recent materials logs for a given material id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of material",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material log",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.MaterialLog"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mlogs/search": {
            "get": {
                "description": "Can get material using it's id, or the material it relates to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "material logs"
                ],
                "summary": "fetches material logs based on given query parameters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "id of material log",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "id of material",
                        "name": "material",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "material log",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/materialdb.MaterialLog"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sites/add": {
            "post": {
                "description": "Adds job_site to the database using valid json structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sites"
                ],
                "summary": "post job_site to database",
                "parameters": [
                    {
                        "description": "Format of add jobsite request",
                        "name": "jobsite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdb.AddJobSiteParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "jobsite",
                        "schema": {
                            "$ref": "#/definitions/userdb.JobSite"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sites/all": {
            "get": {
                "description": "Get all jobsites",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sites"
                ],
                "summary": "fetches all job_sites",
                "responses": {
                    "200": {
                        "description": "job site",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userdb.JobSite"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sites/search": {
            "get": {
                "description": "Gets jobsites using id(may add more parameters later)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sites"
                ],
                "summary": "fetches job_site based on given paremeters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "jobsite's identification number",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "job site",
                        "schema": {
                            "$ref": "#/definitions/userdb.JobSite"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/all": {
            "get": {
                "description": "Gets users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "fetches all users",
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "$ref": "#/definitions/userdb.User"
                        }
                    },
                    "500": {
                        "description": "Faliled to get users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/coworkers": {
            "get": {
                "description": "Adds user to the database using valid json structure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "post user to database",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "user",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "company id",
                        "name": "company",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "jobsite id",
                        "name": "site",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login token",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userdb.GetUsersByJobsiteAndCompanyRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "security": [
                    {
                        "identity": []
                    }
                ],
                "description": "Adds user to the database using valid json structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "post user to database",
                "parameters": [
                    {
                        "description": "Format of add user request",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdb.AddUserParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "$ref": "#/definitions/userdb.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/decrypt": {
            "post": {
                "description": "Decrypt user login token",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Decrypts token",
                "parameters": [
                    {
                        "description": "Format of login user request",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.Token"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login data token",
                        "schema": {
                            "$ref": "#/definitions/auth.Identity"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "description": "Deletes user using id(may add more parameters later)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "removes user based on given paremeters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user's identification number",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "$ref": "#/definitions/userdb.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/join": {
            "get": {
                "description": "Gets users with company and jobsite names",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "fetches all users with their associated company and jobsite names",
                "responses": {
                    "200": {
                        "description": "users with company and jobsite names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userdb.GetUsersWithCompanyAndJobsiteRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/loggout": {
            "post": {
                "description": "Replaces login cookie with an empty one that deletes itself instantly",
                "tags": [
                    "users"
                ],
                "summary": "Removes authenticated user information",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Pulls user login information and authenticates the user\nThe id can be left blank",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticate user information",
                "parameters": [
                    {
                        "description": "Format of login user request",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UnEncrypted"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/search": {
            "get": {
                "description": "Gets user using id(may add more parameters later)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "fetches user based on given paremeters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user's identification number",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user's username",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "$ref": "#/definitions/userdb.User"
                        }
                    },
                    "400": {
                        "description": "Invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Adds user to the database using valid json structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "post user to database",
                "parameters": [
                    {
                        "description": "Format of signup user request",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdb.SignUpParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login token",
                        "schema": {
                            "$ref": "#/definitions/auth.Token"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to signup user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "description": "Updates user using id(may add more parameters later)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "updates user based on given parameters",
                "parameters": [
                    {
                        "description": "Format of update user request",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userdb.UpdateUserParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users",
                        "schema": {
                            "$ref": "#/definitions/userdb.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Identity": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.Token": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "auth.UnEncrypted": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "materialdb.AddCheckoutLogParams": {
            "type": "object",
            "properties": {
                "amount": {},
                "checkout_picture": {},
                "item_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "materialdb.AddMaterialLogParams": {
            "type": "object",
            "properties": {
                "material_id": {
                    "type": "integer"
                },
                "note": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "quantity_change": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "materialdb.AddMaterialParams": {
            "type": "object",
            "properties": {
                "job_site": {
                    "type": "integer"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "picture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "quantity": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "materialdb.ChangeMaterialNoteParams": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "note": {
                    "$ref": "#/definitions/sql.NullString"
                }
            }
        },
        "materialdb.ChangeQuantityParams": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "materialdb.CheckoutLog": {
            "type": "object",
            "properties": {
                "amount": {},
                "checkin_picture": {},
                "checkin_time": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "checkout_picture": {},
                "checkout_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "materialdb.Material": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "job_site": {
                    "type": "integer"
                },
                "last_checked_out": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "picture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "quantity": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "materialdb.MaterialLog": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "material_id": {
                    "type": "integer"
                },
                "note": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "quantity_change": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "sql.NullFloat64": {
            "type": "object",
            "properties": {
                "float64": {
                    "type": "number"
                },
                "valid": {
                    "description": "Valid is true if Float64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullInt64": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "description": "Valid is true if Int64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "userdb.AddCompanyParams": {
            "type": "object",
            "properties": {
                "addr": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "userdb.AddJobSiteParams": {
            "type": "object",
            "properties": {
                "addr": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "userdb.AddUserParams": {
            "type": "object",
            "properties": {
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "jobsite_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "lastname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profilepicture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "userdb.Company": {
            "type": "object",
            "properties": {
                "addr": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "id": {
                    "type": "integer"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "userdb.GetUsersByJobsiteAndCompanyRow": {
            "type": "object",
            "properties": {
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "company_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "jobsite_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "jobsite_name": {
                    "type": "string"
                },
                "lastname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "phone": {
                    "type": "string"
                },
                "profilepicture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "userdb.GetUsersWithCompanyAndJobsiteRow": {
            "type": "object",
            "properties": {
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "company_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "id": {
                    "type": "integer"
                },
                "jobsite_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "jobsite_name": {
                    "type": "string"
                },
                "lastname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "phone": {
                    "type": "string"
                },
                "profilepicture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "userdb.JobSite": {
            "type": "object",
            "properties": {
                "addr": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "id": {
                    "type": "integer"
                },
                "location_lat": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "location_lng": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "userdb.SignUpParams": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "userdb.UpdateUserParams": {
            "type": "object",
            "properties": {
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "email": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "firstname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "id": {
                    "type": "integer"
                },
                "jobsite_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "lastname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "password": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "phone": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "profilepicture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "$ref": "#/definitions/sql.NullString"
                }
            }
        },
        "userdb.User": {
            "type": "object",
            "properties": {
                "company_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "id": {
                    "type": "integer"
                },
                "jobsite_id": {
                    "$ref": "#/definitions/sql.NullInt64"
                },
                "lastname": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profilepicture": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "role": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://app.swaggerhub.com/apis/CJW041/material-tracker_api/1.0"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Material Tracker API",
	Description:      "This is the material tracking application's api for dealing with the materials",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
